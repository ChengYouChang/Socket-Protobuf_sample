// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test0715.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test0715_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test0715_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test0715_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test0715_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test0715_2eproto;
namespace myPackage {
class DATA;
struct DATADefaultTypeInternal;
extern DATADefaultTypeInternal _DATA_default_instance_;
class DATAPACK;
struct DATAPACKDefaultTypeInternal;
extern DATAPACKDefaultTypeInternal _DATAPACK_default_instance_;
}  // namespace myPackage
PROTOBUF_NAMESPACE_OPEN
template<> ::myPackage::DATA* Arena::CreateMaybeMessage<::myPackage::DATA>(Arena*);
template<> ::myPackage::DATAPACK* Arena::CreateMaybeMessage<::myPackage::DATAPACK>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace myPackage {

// ===================================================================

class DATA final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myPackage.DATA) */ {
 public:
  inline DATA() : DATA(nullptr) {}
  ~DATA() override;
  explicit constexpr DATA(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DATA(const DATA& from);
  DATA(DATA&& from) noexcept
    : DATA() {
    *this = ::std::move(from);
  }

  inline DATA& operator=(const DATA& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATA& operator=(DATA&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DATA& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATA* internal_default_instance() {
    return reinterpret_cast<const DATA*>(
               &_DATA_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DATA& a, DATA& b) {
    a.Swap(&b);
  }
  inline void Swap(DATA* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATA* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DATA* New() const final {
    return new DATA();
  }

  DATA* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DATA>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DATA& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DATA& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATA* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myPackage.DATA";
  }
  protected:
  explicit DATA(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXAxisFieldNumber = 1,
    kYAxisFieldNumber = 2,
  };
  // double x_axis = 1;
  void clear_x_axis();
  double x_axis() const;
  void set_x_axis(double value);
  private:
  double _internal_x_axis() const;
  void _internal_set_x_axis(double value);
  public:

  // double y_axis = 2;
  void clear_y_axis();
  double y_axis() const;
  void set_y_axis(double value);
  private:
  double _internal_y_axis() const;
  void _internal_set_y_axis(double value);
  public:

  // @@protoc_insertion_point(class_scope:myPackage.DATA)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_axis_;
  double y_axis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test0715_2eproto;
};
// -------------------------------------------------------------------

class DATAPACK final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:myPackage.DATAPACK) */ {
 public:
  inline DATAPACK() : DATAPACK(nullptr) {}
  ~DATAPACK() override;
  explicit constexpr DATAPACK(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DATAPACK(const DATAPACK& from);
  DATAPACK(DATAPACK&& from) noexcept
    : DATAPACK() {
    *this = ::std::move(from);
  }

  inline DATAPACK& operator=(const DATAPACK& from) {
    CopyFrom(from);
    return *this;
  }
  inline DATAPACK& operator=(DATAPACK&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DATAPACK& default_instance() {
    return *internal_default_instance();
  }
  static inline const DATAPACK* internal_default_instance() {
    return reinterpret_cast<const DATAPACK*>(
               &_DATAPACK_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DATAPACK& a, DATAPACK& b) {
    a.Swap(&b);
  }
  inline void Swap(DATAPACK* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DATAPACK* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DATAPACK* New() const final {
    return new DATAPACK();
  }

  DATAPACK* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DATAPACK>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DATAPACK& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DATAPACK& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DATAPACK* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "myPackage.DATAPACK";
  }
  protected:
  explicit DATAPACK(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kCmdFieldNumber = 1,
  };
  // repeated .myPackage.DATA data = 2;
  int data_size() const;
  private:
  int _internal_data_size() const;
  public:
  void clear_data();
  ::myPackage::DATA* mutable_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myPackage::DATA >*
      mutable_data();
  private:
  const ::myPackage::DATA& _internal_data(int index) const;
  ::myPackage::DATA* _internal_add_data();
  public:
  const ::myPackage::DATA& data(int index) const;
  ::myPackage::DATA* add_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myPackage::DATA >&
      data() const;

  // uint32 cmd = 1;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:myPackage.DATAPACK)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myPackage::DATA > data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 cmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test0715_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DATA

// double x_axis = 1;
inline void DATA::clear_x_axis() {
  x_axis_ = 0;
}
inline double DATA::_internal_x_axis() const {
  return x_axis_;
}
inline double DATA::x_axis() const {
  // @@protoc_insertion_point(field_get:myPackage.DATA.x_axis)
  return _internal_x_axis();
}
inline void DATA::_internal_set_x_axis(double value) {
  
  x_axis_ = value;
}
inline void DATA::set_x_axis(double value) {
  _internal_set_x_axis(value);
  // @@protoc_insertion_point(field_set:myPackage.DATA.x_axis)
}

// double y_axis = 2;
inline void DATA::clear_y_axis() {
  y_axis_ = 0;
}
inline double DATA::_internal_y_axis() const {
  return y_axis_;
}
inline double DATA::y_axis() const {
  // @@protoc_insertion_point(field_get:myPackage.DATA.y_axis)
  return _internal_y_axis();
}
inline void DATA::_internal_set_y_axis(double value) {
  
  y_axis_ = value;
}
inline void DATA::set_y_axis(double value) {
  _internal_set_y_axis(value);
  // @@protoc_insertion_point(field_set:myPackage.DATA.y_axis)
}

// -------------------------------------------------------------------

// DATAPACK

// uint32 cmd = 1;
inline void DATAPACK::clear_cmd() {
  cmd_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATAPACK::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DATAPACK::cmd() const {
  // @@protoc_insertion_point(field_get:myPackage.DATAPACK.cmd)
  return _internal_cmd();
}
inline void DATAPACK::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  cmd_ = value;
}
inline void DATAPACK::set_cmd(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:myPackage.DATAPACK.cmd)
}

// repeated .myPackage.DATA data = 2;
inline int DATAPACK::_internal_data_size() const {
  return data_.size();
}
inline int DATAPACK::data_size() const {
  return _internal_data_size();
}
inline void DATAPACK::clear_data() {
  data_.Clear();
}
inline ::myPackage::DATA* DATAPACK::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:myPackage.DATAPACK.data)
  return data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myPackage::DATA >*
DATAPACK::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:myPackage.DATAPACK.data)
  return &data_;
}
inline const ::myPackage::DATA& DATAPACK::_internal_data(int index) const {
  return data_.Get(index);
}
inline const ::myPackage::DATA& DATAPACK::data(int index) const {
  // @@protoc_insertion_point(field_get:myPackage.DATAPACK.data)
  return _internal_data(index);
}
inline ::myPackage::DATA* DATAPACK::_internal_add_data() {
  return data_.Add();
}
inline ::myPackage::DATA* DATAPACK::add_data() {
  ::myPackage::DATA* _add = _internal_add_data();
  // @@protoc_insertion_point(field_add:myPackage.DATAPACK.data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::myPackage::DATA >&
DATAPACK::data() const {
  // @@protoc_insertion_point(field_list:myPackage.DATAPACK.data)
  return data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace myPackage

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test0715_2eproto
